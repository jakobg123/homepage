import styles from "./ConstructionPage.module.scss";
import dynamic from "next/dynamic";
import { useContext } from "react";
// import CodeBox from "../../components/CodeBox";
// import ContentCard from "../../components/ContentCard";
const ContentCard = dynamic(() => import("../../components/ContentCard"));
const CardCode = dynamic(() => import("../../components/CardCode"));
import ImageAndText from "../../components/ImageAndText";
import Image from "../../components/Image";
// import Video from "../../components/Video";
// import VideoCard from "../../components/VideoCard";
// import { CodeBlock, tomorrowNightBlue } from "react-code-blocks";
// import { useRef, useEffect } from "react";
import CardArticle from "../../components/CardArticle";
const Carousel = dynamic(() => import("../../components/Carousel"));
import EntryCentered from "../../components/EntryCentered";
import ModalContext from "../../utils/context/Modal.context";
// import Carousel from "../../components/Carousel";

// import {constructionPageData} from "../../data/ConstructionPage/ConstructionPageData";
// console.log("üöÄ ~ file: ConstructionPage.tsx ~ line 11 ~ constructionPageData", constructionPageData)

interface IConstructionPageProps {
  // pageData: object;
  accessibility: any;
  design: any;
  performance: any;

}

const ConstructionPage: React.FC<IConstructionPageProps> = ({ accessibility, design, performance }) => {
  const { setModalContent } = useContext(ModalContext);
  // console.log("üöÄ ~ file: ConstructionPage.tsx ~ line 18 ~ propps", props)
  // const {accessibility, design, performance} = pageData;

  //   const ref = useRef(0);
  //   console.log("OUTPUT √ÑR ~ file: ConstructionPage.tsx ~ line 11 ~ ref", ref)

  //   useEffect(() => {
  //     let scrollable = isScrollable(ref.current);
  //     console.log("OUTPUT √ÑR ~ file: ConstructionPage.tsx ~ line 14 ~ useEffect ~ scrollable", scrollable)

  //   }, [])
  const imagesDesign = [
    {
      src: '/images/temp/design_411x400-min.jpg',
      alt: 'Ljus, vit bild av flaska och v√§xt.',
      width: 600,
      height: 400,
      caption: "Foto: Deanna Alys, fr√•n unsplash.com",
      mediaQueries: [
        {
          minWidth: 768,
          src: '/images/temp/design_618x500-min.jpg',
        },
        {
          minWidth: 460,
          src: '/images/temp/design_720x400-min.jpg',
        },
      ],
    },
    {
      src: '/images/temp/colors.JPG',
      alt: 'De slutgiltiga f√§rgvalen: Prim√§r, Sekund√§r, Vit, Svart, Hover med ljus bakgrund, Hover med m√∂rk bakgrund.',
      width: 606,
      height: 137,
    },
    {
      src: '/images/temp/contrastPrimaryBlack_411x400-min.jpg',
      alt: 'Kontroll av kontrast mellan prim√§r och m√∂rk f√§rg. Kontrastratiot √§r 12:67:1 vilket uppfyller WCAG:s krav.',
      width: 443,
      height: 400,
      mediaQueries: [
        {
          minWidth: 768,
          src: '/images/temp/contrastPrimaryBlack_618x500-min.jpg',
        },
        {
          minWidth: 460,
          src: '/images/temp/contrastPrimaryBlack_720x400-min.jpg',
        },
      ],
    },
  ];

  const lighthouseImage = {
    src: '/images/temp/lighthouseSajtbygget.JPG',
    alt: 'En Lighthousem√§tning med h√∂gsta po√§ng.',
    width: 1920,
    height: 1031,
    mediaQueries: [
      {
        minWidth: 768,
        src: '/images/temp/lighthouseSajtbygget.JPG',
      },
      {
        minWidth: 460,
        src: '/images/temp/lighthouseSajtbygget.JPG',
      },
    ],
  };

  const imagesAccessibility = [
    {
      src: '/images/temp/accessibility_411x400-min.jpg',
      alt: 'En person som anv√§nder hj√§lpmedel f√∂r datorn.',
      width: 533,
      height: 400,
      caption: "Foto: Sigmund, fr√•n unsplash.com",
      mediaQueries: [
        {
          minWidth: 768,
          src: '/images/temp/accessibility_618x500-min.jpg',
        },
        {
          minWidth: 460,
          src: '/images/temp/accessibility_720x400-min.jpg',
        },
      ],
    },
    {
      src: '/images/temp/burgerInDOM.JPG',
      alt: 'Hamburgerknappen i DOM:en i browsern. Man ser att sr-onlyklassen har "√ñppna meny" i sig.',
      width: 460,
      height: 315,
      x: "20",
      y: "50"
    },
    {
      src: '/images/temp/reactSrOnly.jpg',
      alt: 'Kontroll av kontrast mellan prim√§r och m√∂rk f√§rg. Kontrastratiot √§r 12:67:1 vilket uppfyller WCAG:s krav.',
      width: 725,
      height: 654,
    },
  ]




  return (
    <div className={styles["ConstructionPage"]}>
      <div className={styles['ConstructionPage__Grid']}>

        <h1 className={styles['ConstructionPage__Title']}>Sajtbygget</h1>

        {/* <div className={styles['ConstructionPage__Em']}> */}
        {/* <em className={styles['ConstructionPage__Em']}>S√• h√§r gjordes webbsidan</em> */}
        {/* <h2>H√§r f√•r man en inblick i hur jag byggt webbsidan</h2> */}
        <div
          className={styles['ConstructionPage__Preamble']}
        >
          {/* <h2>H√§r f√•r man en inblick i hur jag byggde webbsidan.</h2> */}
          <p>Hemsidan √§r ett sidoprojekt som p√•b√∂rjades Februari 2021. Id√©en var att ha ett st√∂rre projekt som l√§rde mig mer webbutveckling och samtidigt √∂ka chansen att f√• jobb efter utbildningen. Som tur √§r fungerade det! Jag har b√•de l√§rt mig mer och f√•tt ett jobb. ü§ìüî•üöÄ</p>
          {/* <h2 className="h2_size">Tech-stacken</h2>
          <p>Sajten √§r byggd i Next.js, som √§r ett ramverk med m√•nga f√∂rdelar. Bl.a. f√•r man React-kod SSR, vilket ger snabba sidladdningar.</p>
          <p>Mycket av koden √§r i Typescript och stylingen √§r skriven i SCSS.</p> */}

        </div>
        <div className={styles['ConstructionPage__Paragraph']}>
          <h2 className="h2_size">Tech-stacken</h2>
          <p>Sajten √§r byggd i Next.js, som √§r ett ramverk med m√•nga f√∂rdelar. Bl.a. f√•r man React-kod SSR, vilket ger snabba sidladdningar.</p>

          {/* <p>Jag har valt att g√∂ra sajten i ramverket Next.js. Det √§r ett fullstack-ramverk med m√•nga f√∂rdelar. Bl.a. kodar man vanlig React, men Next renderar koden p√• servern, ist√§llet f√∂r p√• klienten som en SPA g√∂r. All markup i HTML-dokumentet √§r allts√• redan med n√§r det n√•r klienten, som g√∂r att browsern direkt kan ladda in CSS och JS vilket ger snabbare initiala sidladdningar som bl.a. √§r bra f√∂r sidans SEO.</p> */}
          <p>Jag valde att att skriva i Typescript, eftersom jag ville l√§ra mig det. Dessutom underl√§ttar TS f√∂r framtida utveckling d√• kodbasen blir l√§ttare att s√§tta sig in.</p>
          <p>
            Stylingen √§r f√∂r √∂vrigt gjord med preprocessorn SCSS och √§r skriven enligt Block__Element--Modifier-praxis (BEM).</p>
        </div>

        {/* </div> */}
      </div>
      <div className={styles['ConstructionPage__Block'] + " " + styles['ConstructionPage__Block--Dark']}>

        <div className={styles['ConstructionPage__WaveWrapper'] + " " + styles['ConstructionPage__WaveWrapper--Design']}>
          <EntryCentered dark text={`<p>F√∂r att pusha mina kunskaper i styling valde jag tidigt att bryta med den mer traditionella, fyrkantiga layouten.</p><p>D√§rf√∂r har bl.a. text puttats utanf√∂r dess ‚Äúcontainer‚Äù, gradienter lagts ovanp√• bilder och v√•giga SVG-element placerats √∂ver kanter.</p><p>Designen kanske bara √§r v√§rldens n√§st snyggaste, men till mitt f√∂rsvar - jag √§r ingen designer.</p>`} title={"Design"} />

          {/* <div className={styles['ConstructionPage__Paragraph']}> */}
          {/* <h2>Design</h2>
            <p>Jag ville ha en f√§rgprofil med rena, matchande och naturliga f√§rger. D√§rf√∂r s√∂kte jag efter bilder med bra f√§rgpaletter p√• <a href="https://www.unsplash.com">unsplash.com</a> som har en stor bildbank man kan anv√§nda sig av.</p>
            <p>Jag fastnade f√∂r denna bild och extraherade fram ett f√∂rsta f√§rgtema med hj√§lp av <a href="https://color.adobe.com/sv/create/image">Adobe Color</a></p> */}
          <ImageAndText dark html={`<h3 class="h2_size">F√§rg</h3>
            <p>Jag ville ha en f√§rgprofil med rena, matchande och naturliga f√§rger. D√§rf√∂r s√∂kte jag efter bilder med bra f√§rgpaletter p√• <a href="https://www.unsplash.com">unsplash.com</a> som har en stor bildbank man kan anv√§nda sig av.</p><p>Jag fastnade f√∂r den h√§r ljusa bilden och extraherade sedan fram ett  f√§rgtema med hj√§lp av <a href="https://color.adobe.com/sv/create/image">Adobe Color</a>.</p><img src="${imagesDesign[1].src}" width="${imagesDesign[1].width}" height="${imagesDesign[1].height}" alt="${imagesDesign[1].alt}" />`} image={imagesDesign[0]} />
          <ImageAndText dark imageToLeft html={`<h3 class="h2_size">Kontraster</h3>
            <p>F√∂r att uppfylla WCAG:s direktiv om tillg√§nglighet p√• webben, skall f√§rger minst ha en kontrastratio p√• 3:1, men den generella rekommendationen √§r minst 4.5:1.</p><p>D√§rf√∂r kontrollerade jag att huvudf√§rgerna uppfyllde detta, vilket de g√∂r med r√•ge.</p>`} image={imagesDesign[2]} />
          {/* </div> */}
          {/* <div className={styles['ConstructionPage__Grid']}> */}
          <div className={styles['ConstructionPage__CarouselWrapper']}>

            <h3 className={styles['ConstructionPage__CarouselTitle']}>Mer om stylingen</h3>
            <Carousel dark carouselData={design.carouselData} />
          </div>
          {/* </div> */}
        </div>

      </div>
      <div className={styles['ConstructionPage__Block'] + " " + styles['ConstructionPage__Block--White'] + " " + styles['ConstructionPage__Block--Accessibility']}>


        <div className={styles['ConstructionPage__WaveWrapper'] + " " + styles['ConstructionPage__WaveWrapper--Accessibility']}>
          <EntryCentered text={`<p>Tillg√§nglighetsanpassning √§r ett omfattande arbete och jag har haft det i √•tanke n√§r jag byggt sajten.</p><p>Med det sagt s√• finns det √§nnu en del anpassningar att g√∂ra, nedan √§r ett axplock av det jag har gjort.</p>`} title={"Tillg√§nglighet"} />


          {/* <div className={styles['ConstructionPage__Paragraph']}> */}
          {/* <h2>Tillg√§nglighet</h2>
            <p>Tillg√§nglighetsanpassning √§r ett omfattande arbete och jag har haft det i √•tanke n√§r jag byggt sajten. Med det sagt s√• finns det √§nnu en del anpassningar att g√∂ra, nedan √§r ett axplock av det jag har gjort.</p> */}

          <ImageAndText reverseWrap light html={`<h3 class="h2_size">Semantik</h3>
            <p>Alla HTML-element (f√∂rutom &lt;div&gt; och &lt;span&gt;) har en semantisk betydelse, vilket inneb√§r att de ber√§ttar vad f√∂r betydelse i sammanhanget dess inneh√•ll har. Det √§r viktigt att skriva semantisk korrekt HTML, delvis f√∂r personer som f√∂rlitar sig p√• sk√§rml√§sare, men ocks√• f√∂r SEO:n d√• s√∂kmotorers indexering utg√•r ifr√•n den semantiska uppm√§rkningen.</p><p>Jag har sett till att alla sidor har en &lt;header&gt;, &lt;main&gt; och &lt;footer&gt; eftersom de elementen beskriver basstrukturen p√• sidan.</p>`}
            image={imagesAccessibility[0]}
          />
          <CardCode noBorder reverse reverseWrap code={accessibility.code.headings} html={`<h3 class="h2_size">Rubrikniv√•er</h3>
            <p>Varje sida har ett h1-element (h√∂gsta rubrikniv√•n) sedan ligger f√∂ljande rubriker i hierarkisk ordning, som baseras p√• om rubriken √§r en underrubrik till ett annat stycke eller b√∂r vara en ny rubrik. Man hoppar aldrig √∂ver en niv√•, d.v.s. g√•r fr√•n h1 till h3. Bilden illustrerar hur rubrikhierarkin b√∂r m√§rkas upp f√∂r en sida.</p><p>I √∂vrigt har allt inneh√•ll en adekvat HTML-tagg, d.v.s. en &lt;p&gt;- inneh√•ller l√∂ptext, &lt;img&gt; inneh√•ller en bild o.s.v.</p>`} />
          <CardCode noBorder code={accessibility.code.burger} html={`<h3 class="h2_size">Markup f√∂r hamburgaren</h3>
            <p>Eftersom vissa anv√§ndare f√∂rlitar sig helt p√• sk√§rml√§sare √§r det viktigt att knappar som styr flikar och dolda element har kopplad markup.
            Ett s√•dant exempel √§r ‚Äúhamburgaren‚Äù - knappen som √∂ppnar menyn i mobill√§ge.
            I koden f√∂r knappen, framg√•r det i aria-controls vilket element som triggas. Knappen styr elementet med id=‚Äùmenu‚Äù. Markupen anger ocks√• om knappen √§r aktiverad eller ej via aria-expanded, som s√§tts huruvida statevariabeln openNav √§r true eller false. Elementet med id=‚Äùmenu‚Äù √§r ocks√• g√∂md f√∂r sk√§rml√§saren, s√• l√§nge v√§rdet aria-hidden √§r true. Elementet b√∂r vara g√∂mt eftersom anv√§ndaren inte skall h√∂ra/f√• tillg√•ng till menyalternativen n√§r menyn inte √§r √∂ppnad.</p>`} />
          <ImageAndText light imageToLeft html={`<h3 class="h2_size">Sr-only</h3>
            <p>En annan viktig detalj √§r klassen ‚Äúsr-only‚Äù, vars CSS visuellt d√∂ljer inneh√•llet, men sk√§rml√§saren kommer fortfarande l√§sa upp det. Eftersom hamburgerknappen inte anger vad som sker n√§r man klickar p√• den, m√•ste dess roll f√∂rtydligas med en sr-only-text - ‚Äú√ñppna meny‚Äù/‚ÄùSt√§ng meny‚Äù.</p><p>En ikon ger bara en mening f√∂r den som kan se den, d√§rf√∂r m√•ste ikonens betydelse alltid finnas med i text, f√∂r att vara tillg√§nglig f√∂r alla.</p>`}
            image={imagesAccessibility[1]}
          />
          {/* <CardCode noBorder reverse code={accessibility.code.burger} html={`<h3>SR-only</h3>
            <p>En annan viktig detalj √§r klassen ‚Äúsr-only‚Äù, vars CSS g√∂mmer dess inneh√•ll fr√•n sk√§rmen, men sk√§rml√§saren kommer fortfarande l√§sa upp inneh√•llet. Eftersom hamburgerknappen inte anger vad som sker n√§r man klickar p√• den, m√•ste dess roll f√∂rtydligas med en sr-only-text - ‚Äú√ñppna meny‚Äù/‚ÄùSt√§ng meny‚Äù.
            F√∂r personer utan funktionsneds√§ttning √§r det tydligt vad den fyrkantiga rutan med tre streck har f√∂r funktion, d√• man ser den i sin kontext. En blind person f√•r dock bara veta att det √§r en knapp, men inte vad den g√∂r. D√§rf√∂r √§r sr-only-elementen viktiga och de finns ofta med d√§r jag anv√§nder mig av ikoner. En ikon ger bara en mening f√∂r den som kan se den, d√§rf√∂r m√•ste ikonens betydelse alltid finnas med i text, f√∂r att vara tillg√§nglig f√∂r alla.</p>`} /> */}
          {/* <ImageAndText light imageToLeft html={`<h3>Rubrikniv√•er</h3>
            <p>Varje sida har ett h1-element (h√∂gsta rubrikniv√•n) sedan ligger f√∂ljande rubriker i hierarkisk ordning, som baseras p√• om rubriken √§r en underrubrik till ett annat stycke eller b√∂r vara en ny rubrik. Man hoppar aldrig √∂ver en niv√•, d.v.s. g√•r fr√•n h1 till h3. Bilden illustrerar hur rubrikhierarkin b√∂r m√§rkas upp f√∂r en sida.</p><p>I √∂vrigt har allt inneh√•ll en adekvat HTML-tagg, d.v.s. en &lt;p&gt;- inneh√•ller l√∂ptext, &lt;img&gt; inneh√•ller en bild o.s.v.</p>`} image={imagesDesign[2]} /> */}
          {/* </div> */}
          {/* <div className={styles['ConstructionPage__Grid']}> */}
          {/* <div className={styles['ConstructionPage__CarouselWrapper']}>

            <h3 className={styles['ConstructionPage__CarouselTitle']}>Mer om stylingen</h3>
            <Carousel carouselData={design.carouselData} />
          </div> */}
          {/* </div> */}
        </div>

      </div>
      <div className={styles['ConstructionPage__Block'] + " " + styles['ConstructionPage__Block--Optimization']}>
        <div className={styles['ConstructionPage__WaveWrapper'] + " " + styles['ConstructionPage__WaveWrapper--Optimization']}>
          <EntryCentered text={`<p>Core Web Vitals √§r ett kvalitetsinitiativ fr√•n Google som m√§ter hur v√§l en sajt presterar utifr√•n olika parametrar.</p><p>Fr.o.m. mitten av juni 2021 kommer CWV-v√§rdet v√§gas in i sajtens SEO-ranking.</p><p>D√§rf√∂r √§r det extra viktigt att sajten har bra prestanda.</p>`} title={"Optimering"} />
          {/* <div className={styles['ConstructionPage__Grid']}> */}
          <CardArticle>
            {/* <CardCode code={performance.code.image} html={performance.text.html1} /> */}
            <ContentCard image={performance.images.lighthouse} html={performance.text.html1} />
            {true && (
              <CardCode reverse reverseWrap code={performance.code.image} html={performance.text.imageHtml} />
            )}
            {/* {true && (
              <CardCode code={performance.code.image} html={performance.dummyText} reverse reverseWrap />
            )} */}
            {true && (
              <ContentCard video={performance.video.desktopWithoutPerfEnh} html={performance.text.perfHtml1} />
            )}
            {true && (
              <ContentCard reverseWrap video={performance.video.desktopPerfEnh} html={performance.text.perfHtml2} reverse />
            )}
            {true && (
              <ContentCard image={performance.images.bundleBefore} html={performance.text.perfHtml3} />

            )}
            <ContentCard reverse image={performance.images.bundleAfter} html={performance.text.perfHtml4} />
            <ContentCard image={performance.images.webpackBefore} html={performance.text.perfHtml5} />
            <ContentCard reverse image={performance.images.webpackAfter} html={performance.text.perfHtml6} />

          </CardArticle>
          {/* </div> */}
        </div>
      </div>
      <div className={styles['ConstructionPage__Grid']}>
        {/* <EntryCentered title={"...och om planeterna st√•r r√§tt och v√§dret till√•ter..."} /> */}

        <div className={styles['ConstructionPage__Lighthouse']}>
          <h2 className={styles['ConstructionPage__LighthouseTitle']}>...och om planeterna st√•r r√§tt och v√§dret till√•ter...</h2>
          <div className={styles['ConstructionPage__OuterImageWrapper']}
            onClick={() => setModalContent({ image: lighthouseImage })}
          >
            <div className={styles['ConstructionPage__LighthouseImageWrapper']}>
              <Image {...lighthouseImage} />
            </div>
          </div>
        </div>
      </div>

    </div>
  );
};

// export async function getStaticProps(props){
//     console.log("üöÄ ~ file: ConstructionPage.tsx ~ line 160 ~ getStaticProps ~ props", props)
//     console.log("k√∂rs den ens");
//     return {
//         props:{
//             constructionPageData
//             // pageData: {
//             // }
//         }
//     }
// }

export default ConstructionPage;
